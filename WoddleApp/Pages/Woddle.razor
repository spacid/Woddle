@page "/"
@inject HttpClient Http
@inject IJSRuntime JSRuntime

<h3>Woddle</h3>
<button class="btn btn-primary" @onclick="NewWord">Nieuw woord</button>

 <div id="container">
@if (wordToFind == null)
{
    <p><em>Loading...</em></p>
}
else
{
    @for (int i = 0; i < amountOfTries; i++)
    {
        <div>
            @for (int j = 0; j < wordLength; j++)
            {
                <div class="square @grid.Words[i,j].CharPosition">@grid.Words[i,j].Character</div>
            }
        </div>
    }

    @if (gameState == GameState.Won)
    {
        <p>Joepie gewonnen!</p>
    }
    else if (gameState == GameState.Lost)
    {
        <p>Verloren, jammer! Het woord is: @wordToFind</p>
    }
}

<input placeholder="Vul woord in" @onchange="AddWord" />
</div>

@code {
    /// <summary>
    /// The word to guess.
    /// </summary>
    public static string? wordToFind { get; set; }
    /// <summary>
    /// The state of the game.
    /// </summary>
    public static GameState gameState = GameState.Ongoing;
    /// <summary>
    /// Length of the word to guess
    /// </summary>
    public static int wordLength = 5;
    /// <summary>
    /// The word list containing all potentials words.
    /// </summary>
    private ISet<string> words = new HashSet<string>();
    /// <summary>
    /// The words the player already guessed.
    /// </summary>
    private GameGrid grid = new GameGrid();
    /// <summary>
    /// The amount of times the player can guess.
    /// </summary>
    private static int amountOfTries = 6;
    /// <summary>
    /// The amount of times the player already guessed.
    /// </summary>
    private int tries = 0;

    /// <summary>
    /// Reads the words from a text file and initializes a word to guess.
    /// </summary>
    /// <returns></returns>
    protected override async Task OnInitializedAsync()
    {
        string result = await Http.GetStringAsync("sample-data/words.txt");
        words = result.Split('\n').Select(p => p.Trim()).ToHashSet();
        NewWord();
    }

    public enum CharPositionCSS
    {
        correctplace,
        wrongplace,
        notused,
        absent
    }

    public enum GameState
    {
        Ongoing,
        Won,
        Lost
    }

    public class InputChar
    {
        public char Character { get; set; }
        public CharPositionCSS CharPosition { get; set; }

        public InputChar()
        {
            CharPosition = CharPositionCSS.absent;
        }
    }

    public class GameGrid
    {
        public InputChar[,] Words = new InputChar[amountOfTries, wordLength];

        public GameGrid()
        {
            foreach (int i in Enumerable.Range(0, amountOfTries)) {
                foreach (int j in Enumerable.Range(0, wordLength))
                {
                    Words[i,j] = new InputChar();
                }
            } 
        }
    }
    /// <summary>
    /// The input word will be compared to the word that needs to be guessed.
    /// 
    /// Guessing is a two-pass algorithm:
    /// The first pass will check if the characters are in the exact spot.
    /// The second pass is to determine the class of the characters not in the exact spot: wrong place or not used.
    /// 
    /// First, it loops over every character in the input word. Each character will be compared to the
    /// character in the same location of the answer word:
    ///  - If the characters match, the character will be marked "as in the exact same place".
    ///  - If they don't match the character of the answer will be added to a List (notMatchedChars), which will be used
    ///    in the second pass.
    /// 
    /// Secondly, we loop over every not-matched character of the input word again. If that character is contained in
    /// the list with the not-matched characters of the answer word:
    ///  - If so, the character is in the wrong place.
    ///  - If not, the character is not used.
    /// 
    /// It is important to note that if a character is determined to be in the wrong place, it is removed from the list
    /// with the non matched characters.
    /// </summary>
    /// <param name="args">The input from the text field</param>
    private void AddWord(ChangeEventArgs args)
    {
        string inputWord = ((string)args.Value).ToLower();
        if (gameState == GameState.Ongoing && tries < amountOfTries && inputWord.Length == wordLength)
        {
            if (!words.Contains(inputWord))
            {
                JSRuntime.InvokeAsync<object>("alert", $"Het woord '{inputWord}' bevindt zich niet in het woordenboek.");
                return;
            }
            int i = 0;
            IList<char> notMatchedChars = new List<char>();
            IList<int> unmappedIndexes = new List<int>();
            // First pass to determine the characters in the exact same spot as the answer word.
            foreach (char c in inputWord)
            {
                InputChar inputChar = grid.Words[tries, i];
                inputChar.Character = c;
                if (wordToFind[i] == c)
                {
                    inputChar.CharPosition = CharPositionCSS.correctplace;
                }
                else
                {
                    unmappedIndexes.Add(i);
                    notMatchedChars.Add(wordToFind[i]);
                }
                i += 1;
            }
            // Second pass to determine the class of the not-matched characters.
            foreach (int idx in unmappedIndexes)
            {
                if (notMatchedChars.Contains(inputWord[idx]))
                {
                    grid.Words[tries, idx].CharPosition = CharPositionCSS.wrongplace;
                    notMatchedChars.Remove(inputWord[idx]);
                }
                else
                {
                    grid.Words[tries, idx].CharPosition = CharPositionCSS.notused;
                }
            }
            tries += 1;
            // Check game state
            if (unmappedIndexes.Count == 0)
            {
                gameState = GameState.Won;
            }
            else if (tries == amountOfTries)
            {
                gameState = GameState.Lost;
            }
        }
    }
    /// <summary>
    /// Get a random word from the word list. This is the word to guess.
    /// </summary>
    /// <returns>The random word</returns>
    private string GetRandomWord()
    {
        return words.ElementAt(new Random().Next(words.Count));
    }

    /// <summary>
    /// Reset the game.
    /// </summary>
    private void NewWord()
    {
        wordToFind = GetRandomWord();
        grid = new GameGrid();
        tries = 0;
        gameState = GameState.Ongoing;
    }
}

