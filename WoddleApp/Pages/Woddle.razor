@page "/"
@inject HttpClient Http

<h3>Woddle</h3>
@if (wordToFind == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div id="container">
        @foreach (var word in inputWords)
        {
            <div>
                @foreach (var c in word.InputChars)
                {
                    <div class="square @c.CharPosition">@c.Character</div>
                }

            </div>
        }
    </div>

    <p>Aantal pogingen: @tries. Nog @(amountOfTries - tries) te gaan</p>
    @if (tries == amountOfTries)
    {
        <p>Het woord is: @wordToFind.Word</p>
    }
}

<input placeholder="Enter your text" @onchange="AddWord" />

<button class="btn btn-primary" @onclick="NewWord">New word</button>

@code {
    /// <summary>
    /// The word to guess.
    /// </summary>
    public static GuessWord? wordToFind { get; set; }
    /// <summary>
    /// Length of the word to guess
    /// </summary>
    public static int wordLength = 5;
    /// <summary>
    /// The word list containing all potentials words.
    /// </summary>
    private List<string> words = new List<string>();
    /// <summary>
    /// The words the player already guessed.
    /// </summary>
    private List<InputWord> inputWords = new List<InputWord>(amountOfTries);
    /// <summary>
    /// The amount of times the player can guess.
    /// </summary>
    private static int amountOfTries = 6;
    /// <summary>
    /// The amount of times the player already guessed.
    /// </summary>
    private int tries = 0;

    /// <summary>
    /// Reads the words from a text file and initializes a word to guess.
    /// </summary>
    /// <returns></returns>
    protected override async Task OnInitializedAsync()
    {
        string result = await Http.GetStringAsync("sample-data/words.txt");
        words = result.Split('\n').ToList();
        NewWord();
    }

    public enum CharPositionCSS
    {
        correctplace,
        wrongplace,
        notused
    }

    /// <summary>
    /// Representation of the word to guess.
    /// </summary>
    public class GuessWord
    {
        public string Word { get; set; }
        public IDictionary<char, int> Chars = new Dictionary<char, int>();

        public GuessWord(string word)
        {
            Word = word;
            foreach (var c in word)
            {
                if (!Chars.ContainsKey(c))
                {
                    Chars.Add(c, 1);
                }
                else
                {
                    Chars[c] += Chars[c] + 1;
                }
            }
        }
    }

    public class InputChar
    {
        public char Character { get; set; }
        public CharPositionCSS CharPosition { get; set; }

        public InputChar(char character)
        {
            Character = character;
        }
    }

    public class InputWord
    {
        public List<InputChar> InputChars = new List<InputChar>(wordLength);

        public InputWord(string word)
        {
            int i = 0;
            IDictionary<char, int> foundChars = new Dictionary<char, int>();
            foreach (char c in word)
            {
                InputChar inputChar = new InputChar(c);
                // A character should be classified as being in the wrong spot
                // only if that character still remains in the word. For example,
                // the word to guess is "beast" and the player guesses "beret". The
                // first 'e' is in the correct spot but the second 'e' should not be
                // classified as in the wrong spot because there is no more 'e' in the
                // word to guess. We use a Dictionary to count the remaining characters.
                if (!foundChars.ContainsKey(c))
                {
                    foundChars.Add(c, 1);
                }
                else
                {
                    foundChars[c] += foundChars[c] + 1;
                }

                // Determine the classification of the character.
                if (wordToFind.Word[i] == c)
                {
                    inputChar.CharPosition = CharPositionCSS.correctplace;
                }
                else if (wordToFind.Word.Contains(c) && foundChars[c] < wordToFind.Chars[c])
                {
                    inputChar.CharPosition = CharPositionCSS.wrongplace;
                }
                else
                {
                    inputChar.CharPosition = CharPositionCSS.notused;

                }

                InputChars.Add(inputChar);
                i += 1;
            }
        }
    }
    /// <summary>
    /// Guess a given word
    /// </summary>
    /// <param name="args">The input from the text field</param>
    private void AddWord(ChangeEventArgs args)
    {
        string inputWord = (string)args.Value;
        if (tries < amountOfTries && inputWord.Length == wordLength)
        {
            //words.Add((string)args.Value);
            inputWords.Add(new InputWord(inputWord));
            tries += 1;
        }
    }
    /// <summary>
    /// Get a random word from the word list. This is the word to guess.
    /// </summary>
    /// <returns>The random word</returns>
    private string GetRandomWord()
    {
        return words[new Random().Next(words.Count)];
    }

    /// <summary>
    /// Reset the game.
    /// </summary>
    private void NewWord()
    {
        wordToFind = new GuessWord(GetRandomWord());
        inputWords = new List<InputWord>(5);
        tries = 0;
    }
}

